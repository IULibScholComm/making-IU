}
Fig12 <- data.frame("Generation" = time, "Number" = out_asex, "Mode" = rep("Asexuals", length(out_asex)))
Fig12s <- data.frame("Generation" = time, "Number" = out_sex, "Mode" = rep("Sexuals", length(out_sex)))
Fig12 <- rbind(Fig12, Fig12s)
curtstheme <- theme_tufte() + theme(
axis.title.x = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.title.y = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.text.x = element_text(face="bold", size=14, family = "Routed Gothic"),
axis.text.y = element_text(face="bold", size=14, family = "Routed Gothic"),
plot.title = element_text(face = "bold", size = 24, hjust = 0.5, family = "Routed Gothic"),
plot.subtitle= element_text(size = 18, hjust = 0.5, family = "Routed Gothic"),
plot.caption = element_text(size = 12, hjust = 0.5, family = "Routed Gothic"),
axis.line = element_line(linewidth = 1),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.25, "cm"))
p <- ggplot(Fig12, aes(x=Generation, y=Number, color=Mode)) +
geom_line(linewidth=2) +
scale_x_continuous(name="GENERATION",  limits =c(980, 1100), breaks=seq(980, 1100, 20)) +
scale_y_continuous(name="NUMBER\n", limits = c(0, 21500)) +
scale_color_manual(values = c(Asexuals = "#235FA4", Sexuals = "#FF4242"))  +
annotate(geom = "text", x= 1080, y = 21500, label = "Asexuals", color = "#235FA4", size = 6, family = "Routed Gothic") +
annotate(geom = "text", x= 1080, y = 1500, label = "Sexuals", color = "#FF4242", size = 6, family = "Routed Gothic") +
theme(aspect.ratio = 1/1.5) + curtstheme +  theme(legend.position = "none")
steps <- list(
list(args = list("marker.color", "red"),
label = "Red",
method = "restyle",
value = "1"
),
list(args = list("marker.color", "green"),
label = "Green",
method = "restyle",
value = "2"
),
list(args = list("marker.color", "blue"),
label = "Blue",
method = "restyle",
value = "3"
)
)
ggplotly(p, dynamicTicks = TRUE) %>%
sliders = list(
list(
active = 1,
currentvalue = list(prefix = "Color: "),
pad = list(t = 60),
steps = steps)))
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = 0.5
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - s) * b - d) / ((1 - s) * a + c)
#solution for carrying capacity of asexual population
k_asex <- (b - d) / (a + c)
# intitial conditions.  Sex initiated at Ksex.  Asex at 0.
sex <- k_sex
a_sex <- 0
# generation at which a single asexual female is introduced
ga_sex <- 1000
# t is the number of time steps in addition to time step 0
t <- 1200
# sets up do loop for i = 1 to T
time <- c(1:t)
# outSex vector saving output for number of Aexuals
out_sex <- vector()
out_sex[1] <- sex[1]
# outAsex vector saving output for number of Asexuals
out_asex <- vector()
out_asex[1] <- a_sex[1]
for (i in 1:t){
out_sex[i] <- sex[i]
sex[i + 1] <- sex[i] - sex[i] * (d + c * (sex[i] +a_sex[i])) + sex[i] * (1 - s) * (b - a * (sex[i] + a_sex[i]))
if(i == ga_sex)
{a_sex[i] <- a_sex[i] + 1
}
out_asex[i] <- a_sex[i]
a_sex[i + 1] <- a_sex[i] - a_sex[i] * d + a_sex[i] * (b - a * (sex[i] + a_sex[i]))
}
Fig12 <- data.frame("Generation" = time, "Number" = out_asex, "Mode" = rep("Asexuals", length(out_asex)))
Fig12s <- data.frame("Generation" = time, "Number" = out_sex, "Mode" = rep("Sexuals", length(out_sex)))
Fig12 <- rbind(Fig12, Fig12s)
curtstheme <- theme_tufte() + theme(
axis.title.x = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.title.y = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.text.x = element_text(face="bold", size=14, family = "Routed Gothic"),
axis.text.y = element_text(face="bold", size=14, family = "Routed Gothic"),
plot.title = element_text(face = "bold", size = 24, hjust = 0.5, family = "Routed Gothic"),
plot.subtitle= element_text(size = 18, hjust = 0.5, family = "Routed Gothic"),
plot.caption = element_text(size = 12, hjust = 0.5, family = "Routed Gothic"),
axis.line = element_line(linewidth = 1),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.25, "cm"))
p <- ggplot(Fig12, aes(x=Generation, y=Number, color=Mode)) +
geom_line(linewidth=2) +
scale_x_continuous(name="GENERATION",  limits =c(980, 1100), breaks=seq(980, 1100, 20)) +
scale_y_continuous(name="NUMBER\n", limits = c(0, 21500)) +
scale_color_manual(values = c(Asexuals = "#235FA4", Sexuals = "#FF4242"))  +
annotate(geom = "text", x= 1080, y = 21500, label = "Asexuals", color = "#235FA4", size = 6, family = "Routed Gothic") +
annotate(geom = "text", x= 1080, y = 1500, label = "Sexuals", color = "#FF4242", size = 6, family = "Routed Gothic") +
theme(aspect.ratio = 1/1.5) + curtstheme +  theme(legend.position = "none")
steps <- list(
list(args = list("marker.color", "red"),
label = "Red",
method = "restyle",
value = "1"
),
list(args = list("marker.color", "green"),
label = "Green",
method = "restyle",
value = "2"
),
list(args = list("marker.color", "blue"),
label = "Blue",
method = "restyle",
value = "3"
)
)
ggplotly(p) %>%
layout(title = "Basic Slider",
sliders = list(
list(
active = 1,
currentvalue = list(prefix = "Color: "),
pad = list(t = 60),
steps = steps)))
install.packages("manipulate")
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = 0.5
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - s) * b - d) / ((1 - s) * a + c)
#solution for carrying capacity of asexual population
k_asex <- (b - d) / (a + c)
# intitial conditions.  Sex initiated at Ksex.  Asex at 0.
sex <- k_sex
a_sex <- 0
# generation at which a single asexual female is introduced
ga_sex <- 1000
# t is the number of time steps in addition to time step 0
t <- 1200
# sets up do loop for i = 1 to T
time <- c(1:t)
# outSex vector saving output for number of Aexuals
out_sex <- vector()
out_sex[1] <- sex[1]
# outAsex vector saving output for number of Asexuals
out_asex <- vector()
out_asex[1] <- a_sex[1]
for (i in 1:t){
out_sex[i] <- sex[i]
sex[i + 1] <- sex[i] - sex[i] * (d + c * (sex[i] +a_sex[i])) + sex[i] * (1 - s) * (b - a * (sex[i] + a_sex[i]))
if(i == ga_sex)
{a_sex[i] <- a_sex[i] + 1
}
out_asex[i] <- a_sex[i]
a_sex[i + 1] <- a_sex[i] - a_sex[i] * d + a_sex[i] * (b - a * (sex[i] + a_sex[i]))
}
Fig12 <- data.frame("Generation" = time, "Number" = out_asex, "Mode" = rep("Asexuals", length(out_asex)))
Fig12s <- data.frame("Generation" = time, "Number" = out_sex, "Mode" = rep("Sexuals", length(out_sex)))
Fig12 <- rbind(Fig12, Fig12s)
curtstheme <- theme_tufte() + theme(
axis.title.x = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.title.y = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.text.x = element_text(face="bold", size=14, family = "Routed Gothic"),
axis.text.y = element_text(face="bold", size=14, family = "Routed Gothic"),
plot.title = element_text(face = "bold", size = 24, hjust = 0.5, family = "Routed Gothic"),
plot.subtitle= element_text(size = 18, hjust = 0.5, family = "Routed Gothic"),
plot.caption = element_text(size = 12, hjust = 0.5, family = "Routed Gothic"),
axis.line = element_line(linewidth = 1),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.25, "cm"))
p <- ggplot(Fig12, aes(x=Generation, y=Number, color=Mode)) +
geom_line(linewidth=2) +
scale_x_continuous(name="GENERATION",  limits =c(980, 1100), breaks=seq(980, 1100, 20)) +
scale_y_continuous(name="NUMBER\n", limits = c(0, 21500)) +
scale_color_manual(values = c(Asexuals = "#235FA4", Sexuals = "#FF4242"))  +
annotate(geom = "text", x= 1080, y = 21500, label = "Asexuals", color = "#235FA4", size = 6, family = "Routed Gothic") +
annotate(geom = "text", x= 1080, y = 1500, label = "Sexuals", color = "#FF4242", size = 6, family = "Routed Gothic") +
theme(aspect.ratio = 1/1.5) + curtstheme +  theme(legend.position = "none")
manipulate(ggplotly(p), s=slider(0.2,0.5))
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = 0.5
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - s) * b - d) / ((1 - s) * a + c)
#solution for carrying capacity of asexual population
k_asex <- (b - d) / (a + c)
# intitial conditions.  Sex initiated at Ksex.  Asex at 0.
sex <- k_sex
a_sex <- 0
# generation at which a single asexual female is introduced
ga_sex <- 1000
# t is the number of time steps in addition to time step 0
t <- 1200
# sets up do loop for i = 1 to T
time <- c(1:t)
# outSex vector saving output for number of Aexuals
out_sex <- vector()
out_sex[1] <- sex[1]
# outAsex vector saving output for number of Asexuals
out_asex <- vector()
out_asex[1] <- a_sex[1]
for (i in 1:t){
out_sex[i] <- sex[i]
sex[i + 1] <- sex[i] - sex[i] * (d + c * (sex[i] +a_sex[i])) + sex[i] * (1 - s) * (b - a * (sex[i] + a_sex[i]))
if(i == ga_sex)
{a_sex[i] <- a_sex[i] + 1
}
out_asex[i] <- a_sex[i]
a_sex[i + 1] <- a_sex[i] - a_sex[i] * d + a_sex[i] * (b - a * (sex[i] + a_sex[i]))
}
Fig12 <- data.frame("Generation" = time, "Number" = out_asex, "Mode" = rep("Asexuals", length(out_asex)))
Fig12s <- data.frame("Generation" = time, "Number" = out_sex, "Mode" = rep("Sexuals", length(out_sex)))
Fig12 <- rbind(Fig12, Fig12s)
curtstheme <- theme_tufte() + theme(
axis.title.x = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.title.y = element_text(size=18,face="bold", vjust = -1, family = "Routed Gothic"),
axis.text.x = element_text(face="bold", size=14, family = "Routed Gothic"),
axis.text.y = element_text(face="bold", size=14, family = "Routed Gothic"),
plot.title = element_text(face = "bold", size = 24, hjust = 0.5, family = "Routed Gothic"),
plot.subtitle= element_text(size = 18, hjust = 0.5, family = "Routed Gothic"),
plot.caption = element_text(size = 12, hjust = 0.5, family = "Routed Gothic"),
axis.line = element_line(linewidth = 1),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.25, "cm"))
p <- ggplot(Fig12, aes(x=Generation, y=Number, color=Mode)) +
geom_line(linewidth=2) +
scale_x_continuous(name="GENERATION",  limits =c(980, 1100), breaks=seq(980, 1100, 20)) +
scale_y_continuous(name="NUMBER\n", limits = c(0, 21500)) +
scale_color_manual(values = c(Asexuals = "#235FA4", Sexuals = "#FF4242"))  +
annotate(geom = "text", x= 1080, y = 21500, label = "Asexuals", color = "#235FA4", size = 6, family = "Routed Gothic") +
annotate(geom = "text", x= 1080, y = 1500, label = "Sexuals", color = "#FF4242", size = 6, family = "Routed Gothic") +
theme(aspect.ratio = 1/1.5) + curtstheme +  theme(legend.position = "none")
manipulate(s=slider(0.2,0.5))
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = slider(0.2,0.5)
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - s) * b - d) / ((1 - s) * a + c)
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = $slider(0.2,0.5)
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = slider(0.2,0.5)
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = slider(0.2,0.5)
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - $s) * b - d) / ((1 - $s) * a + c)
library(ggplot2)
library(ggthemes)
library(ggtext)
library(extrafont)
library(plotly)
library(manipulate)
# Simulation for competition between coexisting sexuals and asexuals, following Lively 2009.
# the simulation assumes that carrying capacity is set by the parameters below, rather than being fixed.
# a is a constant that gives the sensitivity to total population density
a <- 0.0001
# d is the death rate.  Here I set d=1, meaning an annual species.
d <- 1.0
# b is the number of offspring prouduced by a single female (sexual or asexual)
b <- 3.0
# c is a constant that gives the sensitivity of the death rate to density.
c <- 0
# s is the frequency of males in the sexual subpopulation. (1-s) gives the freq of females in sexual pop.
s = slider(0.2,0.5)
# anayltical solutions: carrying capacities for sexual and asexuals are set by the parameters given above,
# following Lively (2009) J Evol Biol. doi: 10.1111/j.1420-9101.2009.01824.x
#solution for carrying capacity of sexual population
k_sex <- ((1 - s$s) * b - d) / ((1 - s$s) * a + c)
#solution for carrying capacity of asexual population
k_asex <- (b - d) / (a + c)
# intitial conditions.  Sex initiated at Ksex.  Asex at 0.
sex <- k_sex
a_sex <- 0
# generation at which a single asexual female is introduced
ga_sex <- 1000
# t is the number of time steps in addition to time step 0
t <- 1200
# sets up do loop for i = 1 to T
time <- c(1:t)
# outSex vector saving output for number of Aexuals
out_sex <- vector()
out_sex[1] <- sex[1]
# outAsex vector saving output for number of Asexuals
out_asex <- vector()
out_asex[1] <- a_sex[1]
for (i in 1:t){
out_sex[i] <- sex[i]
sex[i + 1] <- sex[i] - sex[i] * (d + c * (sex[i] +a_sex[i])) + sex[i] * (1 - s) * (b - a * (sex[i] + a_sex[i]))
if(i == ga_sex)
{a_sex[i] <- a_sex[i] + 1
}
out_asex[i] <- a_sex[i]
a_sex[i + 1] <- a_sex[i] - a_sex[i] * d + a_sex[i] * (b - a * (sex[i] + a_sex[i]))
}
shiny::runApp('C:/Users/amazel/Downloads')
uninstall.R(4.3.0, GUI = TRUE)
uninstall.R("4.3.0", GUI = TRUE)
install.packages('installr')
uninstall.R("4.3.0", GUI = TRUE)
library(shiny); runApp('C:/Users/amazel/Desktop/Lively shiny app v2.R')
r.home()
R.home()
getwd()
library(shiny); runApp('C:/Users/amazel/Desktop/IUB-SC-NTPS-publications/lively-curtis/Lively shiny app v2.R')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('knitr')
install.packages("knitr")
install.packages("rmarkdown")
Sys.getenv("QUARTO_R")
install.packages("webshot2")
install.packages("geojsonio")
install.packages("sf")
install.packages("leaflet.extras2")
install.packages("leaflet.extras2")
packageVersion("leaflet.extras2")
installed.packages()["leaflet.extras2", ]
ls("package:leaflet.extras2")
library(leaflet.extras2)
ls("package:leaflet.extras2")
install.packages("yyjsonr")
install.packages("dplyr")
setwd("C:/Users/amazel/Desktop/iubl_publishing/capshew")
campus_2020 <- st_read("mapdata/2020.geojson", quiet = TRUE)
install.packages("sf")
install.packages("sf")
# In R console
library(leaflet)
library(webshot2)
library(htmlwidgets)
library(sf)
# Load data
campus_1885 <- st_read("mapdata/1885.geojson", quiet = TRUE)
campus_1915 <- st_read("mapdata/1915.geojson", quiet = TRUE)
campus_1940 <- st_read("mapdata/1940.geojson", quiet = TRUE)
campus_1960 <- st_read("mapdata/1960.geojson", quiet = TRUE)
campus_1980 <- st_read("mapdata/1980.geojson", quiet = TRUE)
campus_2020 <- st_read("mapdata/2020.geojson", quiet = TRUE)
# Add Year field
for (data in list(campus_1885, campus_1915, campus_1940, campus_1960, campus_1980, campus_2020)) {
data$Year <- as.character(sub("campus_", "", deparse(substitute(data))))
}
# Create map
map <- leaflet() %>%
addTiles() %>%
setView(lng = -86.512450, lat = 39.178837, zoom = 14) %>%
addPolygons(data = campus_1885, color = "black", fillOpacity = 0.3, weight = 1) %>%
addPolygons(data = campus_1915, color = "black", fillOpacity = 0.3, weight = 1) %>%
addPolygons(data = campus_1940, color = "black", fillOpacity = 0.3, weight = 1) %>%
addPolygons(data = campus_1960, color = "black", fillOpacity = 0.3, weight = 1) %>%
addPolygons(data = campus_1980, color = "black", fillOpacity = 0.3, weight = 1) %>%
addPolygons(data = campus_2020, color = "black", fillOpacity = 0.3, weight = 1)
# Save as HTML then screenshot to PNG
saveWidget(map, "campus_map.html", selfcontained = TRUE)
webshot("campus_map.html", "images/campus_map.png", vwidth = 1000, vheight = 800)
library(leaflet)
library(webshot2)
library(htmlwidgets)
library(sf)
# Load data
campus_1885 <- st_read("mapdata/1885.geojson", quiet = TRUE)
campus_1915 <- st_read("mapdata/1915.geojson", quiet = TRUE)
campus_1940 <- st_read("mapdata/1940.geojson", quiet = TRUE)
campus_1960 <- st_read("mapdata/1960.geojson", quiet = TRUE)
campus_1980 <- st_read("mapdata/1980.geojson", quiet = TRUE)
campus_2020 <- st_read("mapdata/2020.geojson", quiet = TRUE)
# Create named list for easier looping and color assignment
campus_list <- list(
"1885" = campus_1885,
"1915" = campus_1915,
"1940" = campus_1940,
"1960" = campus_1960,
"1980" = campus_1980,
"2020" = campus_2020
)
# Define a color for each year (choose distinct colors)
year_colors <- c(
"1885" = "#1f78b4",
"1915" = "#33a02c",
"1940" = "#e31a1c",
"1960" = "#ff7f00",
"1980" = "#6a3d9a",
"2020" = "#b15928"
)
# Start leaflet map
map <- leaflet() %>%
addTiles() %>%
setView(lng = -86.512450, lat = 39.178837, zoom = 14)
# Add polygons as separate layers/groups
for (year in names(campus_list)) {
map <- map %>%
addPolygons(
data = campus_list[[year]],
color = "black",
fillColor = year_colors[year],
fillOpacity = 0.3,
weight = 1,
group = year,
label = paste("Campus year:", year)
)
}
# Add layer control (toggle)
map <- map %>%
addLayersControl(
overlayGroups = names(campus_list),
options = layersControlOptions(collapsed = FALSE)
)
# Save widget and screenshot
saveWidget(map, "campus_map.html", selfcontained = TRUE)
webshot("campus_map.html", "images/campus_map.png", vwidth = 1000, vheight = 800)
